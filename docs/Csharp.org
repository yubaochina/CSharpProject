* Grammer
** Class
** Object
Object类是所有类的共同基类，它是唯一的非派生类，是继承层次结构的基础。
** Inherit
C#中只能是单继承
** 隐藏方法
定义同名的成员来隐藏基类的成员
- 屏蔽数据成员： 在派生类中声明名称和类型相同的成员
- 屏蔽函数成员： 在派生类中声明新的带有相同函数签名的成员
- 让编译器知道： 可以添加new关键字，否则会有警告

** Virtual Method and Polymorphism
- 一个设计原则
面象对象编程中，都遵循一个原则: 依赖倒置原则. 换句话说程序设计要依赖于抽象(Pet)类，而不依赖于具体类（Dog）。

基类的引用可以指向派生类

虚方法：声明virtual的方法就是虚方法。基类的虚方法可以在派生类中使用override进行重写。

- 重写虚方法必须具有相同的可访问性，且基类方法不能是private
- 不能重写static方法或非虚方法
- 方法，属性，索引器，事件，都可以声明为virtual or override

Polymorphism:
通过指向派生类的基类引用，调用虚函数，会根据引用所指向派生类的实际类型，调用派生类中的同名重写函数。

** constructor
派生类对象中，有一部分是基类部分，在执行派行类的构造函数体之前，将会隐式或显示调用基类构造函数。

** Abstract method and abstract class
#+BEGIN_SRC csharp
abstract public void Func();
#+END_SRC

- 抽象类的存在只有一个目的，就是被继承。
- 抽象类不能实例化，用abstract修饰
- 抽象类可以包含抽象成员的普通成员，以用他们的任意组合。
- 抽象类的抽象成员在派生类中需要用override关键字实现。
** 密闭类和密闭方法
密闭类：声明为sealed的类。有些类不希望其他人通过继承来修改。

密闭方法：声明为sealed的方法。不希望其他人重写该方法。
** Interface
- 接口就是指定一组函数成员，而不实现他们的引用类型。
- 接口也是一种引用类型
- 可以实现多个接口. 注意： *基类写在最前面*
#+BEGIN_SRC csharp
  interface ICatchMice
  {
      void CatchMice(); //default is "bublic", however, you cannot add any access modifier
  }

  Cat: Pet, ICatchMice, IClimbTree
  {
      public void CatchMice(){

      }
  }

  Cat c=new Cat();
  ICatchMice ic=(ICatchMice)c;
  c.CatchMice();
  ic.CatchMice();
#+END_SRC
** Static
** introduction
- 静态方法只能访问静态成员
- 普通静态方法可以加访问修饰，静态构造函数不能加访问修饰

** 静态构造函数
- 静态构造函数用于初始化静态字段
- 在引用任何静态成员之前，和创建任何实例之前调用
- 与类同名，使用static，无参数，无访问修饰符
** 静态类
- 静态类不能创建实例
- 如果类只包含了静态的方法和属性，并且标识为static
- 静态类不能创建实例，不能被继承
- 可以为静态类定义一个静态构造函数
- 主要用于基类库（如数学库）和扩展方法，
** 扩展方法
#+BEGIN_SRC csharp
  static class PetGuide{
      public static double HowToFeed(this Dog dog){...} 
  }

  Dog dog=new Dog();
  dog.HowToFeed();
#+END_SRC
- 扩展方法所属的类，必须是static类
- 扩展方法本身必须是static方法
- 扩展方法的第一个参数类型，必须是this + 类名 
** 装箱和拆箱
** 装箱
将值类型转化为引用类型，
 [[file:images/cs_org/boxing.jpg][boxing]]: file:./images/cs_org/boxing.jpg


根据值类型的值，在堆上创建一个完整的引用类型对象，并返回对象的引用，是一种隐式转换。
#+BEGIN_SRC csharp
int i=3;
object oi=null;
oi=i;
#+END_SRC
oi创建了一个新的对象（在堆中），有性能的消耗 \\
装箱的本质就是在堆上创建了引用类型的副本，新创建的引用类型的原来的值类型相互独立。

** 拆箱
将装箱后的对象转换为值类型的过程，是一种显式转换。
#+BEGIN_SRC csharp
int i=3;
object oi=i;
int j=(int)oi;
#+END_SRC

** 自定义转换
为自己的结构或者类定义显式或隐式的转换
** 隐式转换的语法
#+BEGIN_SRC csharp
public static implicit operator Dog( Cat cat)
{
}
#+END_SRC
** 显式转换
#+BEGIN_SRC csharp
public static explicit operator Dog(Cat cat)
{
}
#+END_SRC
** 重载运算符
利用现有的某种运算符，针对自定义类或者结构，定义某种运算操作。\\
简化自定义操作
#+BEGIN_SRC csharp
  public static Dog operator +(Dog male, Dog female)
  {
      return new Dog();
  }
#+END_SRC
不能重载的运算符： =， && ，||, (), [] ...
** 泛型
#+BEGIN_SRC csharp
  class Cage<T> {
      T[] petsArray;
      public void Putln(T pet){...}
      public T TakeOut(int index){...}
  }

  var dogCage=new Cage<Dog>();
  var cavyCage=new Cage<Cavy>();
#+END_SRC
** Why we need generic?
用基类或者公共的接口，甚至是所有类的基类object,也可以实现一个Cage类，但是类型太宽泛，需要显示转换类型，并且判断真实类型是什么。
** 泛型接口
泛型接口允许我们将接口成员的参数和返回类型设置为泛型参数的接口。
#+BEGIN_SRC csharp
  interface IMyself<T>{
      T Myself(T self);
  }
  class A :IMyself<A>{
      public A Myself(A self);
  }
#+END_SRC
** Collection
** Common Collections
*** ArrayList
- 动态ArrayList可以不指定大小
- 使用Cont属性获取长度
- 添加，用add
- remoe, removeAt
- [index]

** List
#+BEGIN_SRC csharp
      Console.WriteLine("\n==========list==============\n");
      List<Dog> list = new List<Dog>();
      list.Add(new Dog("a"));
      list.Add(new PetShop.Dog("b"));
      list.Add(new PetShop.Dog("c"));
      list.RemoveAt(2);
      for (int i = 0; i < list.Count; ++i)
      {
        list[i].PrintName();
      }
#+END_SRC
** Dictionary
#+BEGIN_SRC csharp
      Console.WriteLine("\n==========Dictionary==============\n");
      Dictionary<string, Cat> dic = new Dictionary<string, Cat>();
      dic.Add("A", new Cat("A"));
      dic.Add("B", new Cat("B"));
      dic["A"].PrintName();
#+END_SRC
** Queue
   #+BEGIN_SRC csharp
     Queue<Pet> queue = new Queue<Pet>();
     queue.Enqueue(new Dog("C"));
     queue.Enqueue(new Dog("D"));
     queue.Enqueue(new Dog("E"));
     Pet p = null;
     p = queue.Dequeue();
     p.PrintName();
     p = queue.Dequeue();
     p.PrintName();
     p = queue.Dequeue();
     p.PrintName();

   #+END_SRC
** Stack
#+BEGIN_SRC csharp
      Console.WriteLine("\n==========Stack==============\n");
      Stack<Pet> stack = new Stack<Pet>();
      stack.Push(new Dog("A"));
      stack.Push(new Cat("B"));
      stack.Peek().PrintName();
      stack.Pop();
      stack.Peek().PrintName();
#+END_SRC
** Constrain
** 约束叠加规则 
A.主约束 B.接口约束 C. 构造约束
#+BEGIN_SRC csharp
  void Cage<T>
      where T: Pet, IClimbTree, new ()
          {
          }
#+END_SRC
** Delagate
** What is it?
委托就是持有一个或多个方法的对象，并且该对象可以执行，可以传递。

委托可以持有一系列具有相同签名的函数
** How to declare it?
委托可以持有方法，那么持有什么样的方法呢？
可以声明，它是一种引用类型
#+BEGIN_SRC cpp
delegate void ActCute();
#+END_SRC
** 定义委托类型的对象
既然是种类型，就可以定义该类型的对象
#+BEGIN_SRC cpp
Actcute actCute;
#+END_SRC
** 给委托对象赋值
#+BEGIN_SRC cpp
  class Dog{
  public void WagTail(){
  }
  }
  class Cat{
  public void WagTail(){
  }
  }

  Dog dog=new Dog();
  Cat cat=new Dog();
  actCute=dog.WagTail;
  actCute+=cat.WagTail;

#+END_SRC
** How to use delagate type
#+BEGIN_SRC cpp
actCute();
#+END_SRC
** Lambda Expression
** What is anonymous delegate method
#+BEGIN_SRC cpp
delagate void ActCute();
ActCute del;
del=delegate(){....}(C# 2.0)
#+END_SRC
** What is Lambda expression
Occured from C# 3.0
#+BEGIN_SRC cpp
del=delagate(){}

del=()=>{}

actCute+=()=>{
Console.WreteLine("Do nothing");
}
#+END_SRC
** Event
** What is event?
事件可以理解成是一种封装的受限制的委托

- 发布者：通知某件事情发生的
- 订阅者：对某件事情关注的

事件触发与注册

- 事件发生时，会通知所有关注该事件的订阅者。
就是调用订阅者的注册函数。
- 想在事件发生时被通知，必须注册以表示关注。
注册，就是告诉发布者调用哪一个注册函数
** How to declare event

#+BEGIN_SRC csharp
delegate void Handler();
public [static] event Handler NewDog;
public event [delagate_type] [Event_name]
#+END_SRC
** 事件订阅
#+BEGIN_SRC csharp
NewDog += method
NewDog -= method
#+END_SRC
method: 实例方法，静态方法，匿名方法
** 事件触发
如果有定阅者就触发事件

** Sample Code - Pet Shop
#+BEGIN_SRC csharp :tangle PetShop.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PetShop
{
  struct fish
  {
    int weight;
    int size;
    int type;
  }

  interface ICatchMice
  {
    void CatchMice();
  }

  interface IClimbTree
  {
    void ClimbTree();
  }

  public interface IDogLearn<CMD>where CMD:DogCmd
  {
    void Action(CMD cmd);
  }

  abstract public class Pet
  {
    protected string _name;
    protected int _age;

    public Pet(string name)
    {
      this._name = name;
      this._age = 0;
    }
    public void PrintName()
    {
      Console.WriteLine("[Pet Class] Pet's name is " + this._name);
    }
    public void ShowAge()
    {
      Console.WriteLine("name: " + _name + "Age=" + _age);
    }
    public static Pet operator ++(Pet pet)
    {
      ++pet._age;
      return pet;
    }
    abstract public void Speak();

  }

  static class PetGuide
  {
    static public void HowToFeedDog(this Dog dog)
    {
      Console.WriteLine("Play a vedio about how to feed a dog");
    }
  }

  public class Dog : Pet
  {
    static int Num;
    public delegate void Handler();
    public static event Handler NewDog;
    static Dog()  //static constructor
    {
      Num = 0;
    }
    public Dog(string name) :base(name)
    {
      ++Num;
      if (NewDog != null)
      {
        NewDog();
      }
    }
    new public void PrintName()
    {
      Console.WriteLine("[Dog Class] Pet's name is " + _name);
    }
    public void IsHappy<T>(T target) where T:Pet
    {
      Console.WriteLine(" Happy to see " + target.ToString());
      target.PrintName();
    }
    sealed override public void Speak()
    {
      Console.WriteLine(_name + " :Dog is speaking");
    }
    static public void ShowNum()
    {
      Console.WriteLine("Dog's number:" + Num);
    }
    public static implicit operator Cat(Dog dog)
    {
      Console.WriteLine("Magic: change a dog to a cat");
      return new Cat(dog._name);
    }
    ~Dog()
    {
      Num--;
    }
  }

  public class Labrador: Dog,IDogLearn<SitDogCmd>,IDogLearn<SpeakDogCmd>
  {
    public Labrador(string name)
      :base(name)
    { }
    public void Action(SitDogCmd cmd)
    {
      Console.WriteLine(cmd.GetCmd());
    }
    public void Action(SpeakDogCmd cmd)
    {
      Console.WriteLine(cmd.GetCmd());
    }
  }

  public class Cat : Pet, ICatchMice, IClimbTree
  {
    static int Num;
    public delegate void Handler();
    public static event Handler NewCat;
    static Cat()
    {
      Num = 0;
    }
    public Cat(string name):base(name)
    {
      ++Num;
      if (NewCat != null)
      {
        NewCat();
      }
    }
    new public void PrintName()
    {
      Console.WriteLine("[Cat Class] Pet's name is " + _name);
    }

    sealed override public void Speak()
    {
      Console.WriteLine(_name + " :Cat is speaking");
    }
    
    public void CatchMice()
    {
      Console.WriteLine("Catch Mice");
    }
    
    public void ClimbTree()
    {
      Console.WriteLine("Climb Tree");
    }
    public static explicit operator Dog(Cat cat)
    {
      Console.WriteLine("Magic: cat to dog");
      return new Dog(cat._name);
    }

  }//endCatClass

  public class Cage<T>
  {
    T[] array;
    readonly int Size;
    int num;
    public Cage(int num_Size)
    {
      Size = num_Size;
      num = 0;
      array = new T[Size];
    }
    public void Putin(T pet)
    {
      if(num<Size)
      {
        array[num++] = pet;
      }
      else
      {
        Console.WriteLine("Cage is full");
      }
    }
    public T TakeOut()
    {
      if(num>0)
      {
        return array[--num];
      }
      else
      {
        Console.WriteLine("Cage is empty");
        return default(T);
      }
    }
  } //endOfClassCage  
  class Client
  {
    public void WantADog()
    {
      Console.WriteLine("[Client class] Great, I want to see the new dog");
    }
  }//EndOfClient
  public abstract class DogCmd
  {
    public abstract string GetCmd();
  }//EndOfDogCmd
  public class SitDogCmd:DogCmd
  {
    public override string GetCmd()
    {
      return "sit";
    }

  }//EndOfSitDogCmd
  public class SpeakDogCmd:DogCmd
  {
    public override string GetCmd()
    {
      return "Speak";
    }
  }

  class Person
  {

  }

  class Program
  {
    static void Main(string[] args)
    {
      Dog dog1 = new Dog("Jack");
      dog1.PrintName();
      dog1.Speak();

      Pet dog2 = new Dog("Mimi");
      dog2.PrintName();
      dog2.Speak();

      Pet cat = new Cat("Tom");
      cat.PrintName();
      cat.Speak();

      //implicit operator
      Console.WriteLine("\n==========Implicit Operator==============\n");
      Cat dog2cat = dog1;
      dog2cat.Speak();
      dog2cat.PrintName();

      Console.WriteLine("\n==========Explicit Operator==============\n");
      Cat magicCat = new Cat("magicCat");
      magicCat.Speak();
      magicCat.PrintName();
      
      Dog cat2dog = (Dog)magicCat;
      cat2dog.Speak();
      cat2dog.PrintName();

      //interface
      Console.WriteLine("\n==========Interface==============\n");
      IClimbTree climb = (IClimbTree)cat;
      climb.ClimbTree();
      ICatchMice catchMice = (ICatchMice)cat;
      catchMice.CatchMice();

      //virtual/abstract and override
      Console.WriteLine("\n==========abstract and content==============\n");
      Pet[] pets = new Pet[]{
                new Dog("Jhone"),
                new Cat("Jami")
            };
      for (int i = 0; i < pets.Length; ++i)
      {
        pets[i].Speak();
      }


      //event
      Console.WriteLine("\n==========event==============\n");
      Client c1 = new Client();
      Client c2 = new Client();

      Dog.NewDog += c1.WantADog;
      Dog.NewDog += c2.WantADog;

      //static constructor
      Console.WriteLine("\n==========static==============\n");
      Dog dog = new Dog("Q");
      Dog.ShowNum();

      //static class
      Dog dogTommy = new Dog("Tommy");
      dog.HowToFeedDog();


      //boxing and unboxing
      Console.WriteLine("\n==========Iboxing and unboxing==============\n");
      {
        int i = 3;
        object oi = i;
        Console.WriteLine("i=" + i + "\n"+"oi=" + oi.ToString());
        oi = 10;
        i= 7;
        Console.WriteLine("i=" + i + "\n" + "oi=" + oi.ToString());

        int j = (int)oi;
        Console.WriteLine("j=" + j);
      }

      //operator overload
      Console.WriteLine("\n==========operator overload==============\n");
      {
        Pet[] pets_test_operator = new Pet[]
        {
          new Dog("d01"),new Cat("c01"),new Dog("d02"), new Cat("c03"), new Dog("d03")
        };
        for(int i=0;i<pets_test_operator.Length;++i)
        {
          pets_test_operator[i]++;
          pets_test_operator[i].ShowAge();
        }
      }

      //generic
      Console.WriteLine("\n==========generic and constraint==============\n");
      var dogCage = new Cage<Dog>(1);
      dogCage.Putin(new Dog("A"));
      dogCage.Putin(new Dog("B"));

      var C = dogCage.TakeOut();
      C.PrintName();

      var catCage = new Cage<Cat>(2);
      catCage.Putin(new Cat("A"));
      var D = catCage.TakeOut();
      D.PrintName();

      var dogHappy = new Dog("dogHappy");
     // dogHappy.IsHappy<Person>(new Person());//wrong
      //dogHappy.IsHappy<int>(2); //wrong
      dogHappy.IsHappy<Cat>(new PetShop.Cat("Tom"));
     
      //generic interface
      Labrador labradorDog = new Labrador("labradorDog");
      labradorDog.Action(new SitDogCmd());
      labradorDog.Action(new SpeakDogCmd());

      //List
      Console.WriteLine("\n==========list==============\n");
      List<Dog> list = new List<Dog>();
      list.Add(new Dog("a"));
      list.Add(new PetShop.Dog("b"));
      list.Add(new PetShop.Dog("c"));
      list.RemoveAt(2);
      for (int i = 0; i < list.Count; ++i)
      {
        list[i].PrintName();
      }

      //Dictionary
      Console.WriteLine("\n==========Dictionary==============\n");
      Dictionary<string, Cat> dic = new Dictionary<string, Cat>();
      dic.Add("A", new Cat("A"));
      dic.Add("B", new Cat("B"));
      dic["A"].PrintName();

      //Stack
      Console.WriteLine("\n==========Stack==============\n");
      Stack<Pet> stack = new Stack<Pet>();
      stack.Push(new Dog("A"));
      stack.Push(new Cat("B"));
      stack.Peek().PrintName();
      stack.Pop();
      stack.Peek().PrintName();

      //Queue
      Console.WriteLine("\n==========Queue==============\n");
      Queue<Pet> queue = new Queue<Pet>();
      queue.Enqueue(new Dog("C"));
      queue.Enqueue(new Dog("D"));
      queue.Enqueue(new Dog("E"));
      Pet p = null;
      p = queue.Dequeue();
      p.PrintName();
      p = queue.Dequeue();
      p.PrintName();
      p = queue.Dequeue();
      p.PrintName();



    }//EndOfMain
  }//EndOfProgram
}

#+END_SRC
Result:
#+BEGIN_SRC shell
[Dog Class] Pet's name is Jack
Jack :Dog is speaking
[Pet Class] Pet's name is Mimi
Mimi :Dog is speaking
[Pet Class] Pet's name is Tom
Tom :Cat is speaking

==========Implicit Operator==============

Magic: change a dog to a cat
Jack :Cat is speaking
[Cat Class] Pet's name is Jack

==========Explicit Operator==============

magicCat :Cat is speaking
[Cat Class] Pet's name is magicCat
Magic: cat to dog
magicCat :Dog is speaking
[Dog Class] Pet's name is magicCat

==========Interface==============

Climb Tree
Catch Mice

==========abstract and content==============

Jhone :Dog is speaking
Jami :Cat is speaking

==========event==============


==========static==============

[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
Dog's number:5
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
Play a vedio about how to feed a dog

==========Iboxing and unboxing==============

i=3
oi=3
i=7
oi=10
j=10

==========operator overload==============

[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
name: d01Age=1
name: c01Age=1
name: d02Age=1
name: c03Age=1
name: d03Age=1

==========generic and constraint==============

[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
Cage is full
[Dog Class] Pet's name is A
[Cat Class] Pet's name is A
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
 Happy to see PetShop.Cat
[Pet Class] Pet's name is Tom
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
sit
Speak

==========list==============

[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Dog Class] Pet's name is a
[Dog Class] Pet's name is b

==========Dictionary==============

[Cat Class] Pet's name is A

==========Stack==============

[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Pet Class] Pet's name is B
[Pet Class] Pet's name is A

==========Queue==============

[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Client class] Great, I want to see the new dog
[Pet Class] Pet's name is C
[Pet Class] Pet's name is D
[Pet Class] Pet's name is E
#+END_SRC

* WPF
** Obtaining Device Notification for USB Device Arrival and Surprise Removal for C# WPF
Refer to: https://www.silabs.com/community/interface/knowledge-base.entry.html/2013/11/21/obtaining_devicenot-0ULM
** String and StringBuilder
Example of StringBuilder:
#+BEGIN_SRC cpp :tangle cpplibHeader.h
    __declspec(dllexport) type __cdecl bool cppLibFunc(char* cppLibString, int len)
    {
      char string1[60] = "The quick brown dog jumps over the lazy fox";
      _memccpy(val, string1 , 0, len);
      return true;
    }
#+END_SRC
#+BEGIN_SRC csharp :tangle dllWrapper.cs
  using System;
  using System.Runtime.InteropServices;
  using System.Text;
  public static class dllWrapper
  {
      [DllImport("cppSDKLib", CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl, EntryPoint = "cpplibfunc")]
      public static extern bool  cppLibFunc(StringBuilder cppLibString, int len); //please don't add [out/ref] keyword before Stringbuilder

      private StringBuilder  mStringBuilder=new StringBuilder(20);
      cppLibFunc(mStringBuilder,20); //here mStringBuilder.Length==0, so cannot pass "mStringBuilder.Length" as parameter
  }
#+END_SRC

* Converting Native C/C++ to C#
** DataType Conversion Between C/C++ and C#/Unity
Refer to : https://msdn.microsoft.com/en-us/library/0wf2yk2k.aspx

| C++ Type                | C# Type        | Size                     |
|-------------------------+----------------+--------------------------|
| BOOL                    | bool           | 1 byte                   |
|-------------------------+----------------+--------------------------|
| BYTE                    | byte           | 1 byte                   |
|-------------------------+----------------+--------------------------|
| CHAR                    | byte           | 1 byte                   |
|-------------------------+----------------+--------------------------|
| DECIMAL                 | Decimal        | 16 bytes                 |
|-------------------------+----------------+--------------------------|
| DOUBLE                  | double         | 8 bytes                  |
|-------------------------+----------------+--------------------------|
| DWORD                   | uint, UInt32   | 4 bytes                  |
|-------------------------+----------------+--------------------------|
| FLOAT                   | float, single  | 4 bytes                  |
|-------------------------+----------------+--------------------------|
| INT, signed int         | int, Int32     | 4 bytes                  |
|-------------------------+----------------+--------------------------|
| INT16, signed short int | short, Int16   | 2 bytes                  |
|-------------------------+----------------+--------------------------|
| INT32, signed int       | int, Int32     | 4 bytes                  |
|-------------------------+----------------+--------------------------|
| INT64                   | long, Int64    | 8 bytes                  |
|-------------------------+----------------+--------------------------|
| LONG                    | int, Int32     | 4 bytes                  |
|-------------------------+----------------+--------------------------|
| LONG32, signed int      | int, Int32     | 4 bytes                  |
|-------------------------+----------------+--------------------------|
| LONG64                  | long, Int64    | 8 bytes                  |
|-------------------------+----------------+--------------------------|
| LONGLONG                | long, Int64    | 8 bytes                  |
|-------------------------+----------------+--------------------------|
| SHORT, signed short int | short, Int16   | 2 bytes                  |
|-------------------------+----------------+--------------------------|
| UCHAR, unsigned char    | byte           | 1 byte                   |
|-------------------------+----------------+--------------------------|
| UINT, unsigned int      | uint, UInt32   | 4 bytes                  |
|-------------------------+----------------+--------------------------|
| UINT16, WORD            | ushort, UInt16 | 2 bytes                  |
|-------------------------+----------------+--------------------------|
| UINT32, unsigned int    | uint, UInt32   | 4 bytes                  |
|-------------------------+----------------+--------------------------|
| UINT64                  | ulong, UInt64  | 8 bytes                  |
|-------------------------+----------------+--------------------------|
| ULONG, unsigned long    | uint, UInt32   | 4 bytes                  |
|-------------------------+----------------+--------------------------|
| ULONG32                 | uint, UInt32   | 4 bytes                  |
|-------------------------+----------------+--------------------------|
| ULONG64                 | ulong, UInt64  | 8 bytes                  |
|-------------------------+----------------+--------------------------|
| ULONGLONG               | ulong, UInt64  | 8 bytes                  |
|-------------------------+----------------+--------------------------|
| WORD                    | ushort         | 2 bytes                  |
|-------------------------+----------------+--------------------------|
| void*, pointers         | IntPtr         | x86=4 bytes, x64=8 bytes |
|-------------------------+----------------+--------------------------|


* Reference
- [[http://www.imooc.com/video/14244][imoc_C#_video
]]




